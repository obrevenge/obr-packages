#!/usr/bin/env python2
#
#
# OBRevenge Panel Swither
# By ajjames31
#
# This is a simple gui application to change the panel in OBRevenge
# 

# Importing Modules
import pygtk
import gtk
import os

# Creating base class (base window)

class Base:
    def destroy(self, widget, data=None):
        gtk.main_quit()

    def starttint(self, widget):
        os.system("sed -i -e 's/mate-panel/tint2/g' ~/.config/openbox/autostart;sed -i -e 's/xfce4-panel/tint2/g' ~/.config/openbox/autostart;sed -i -e 's/lxpanel/tint2/g' ~/.config/openbox/autostart;killall xfce4-panel;killall lxpanel;killall mate-panel;nohup tint2 > /dev/null 2> /dev/null &")

    def startlxpanel(self, widget):
        os.system("sed -i -e 's/edge=bottom/edge=top/g' ~/.config/lxpanel/default/panels/panel;sed -i -e 's/mate-panel/lxpanel/g' ~/.config/openbox/autostart;sed -i -e 's/xfce4-panel/lxpanel/g' ~/.config/openbox/autostart;sed -i -e 's/tint2/lxpanel/g' ~/.config/openbox/autostart;killall lxpanel;killall tint2;killall mate-panel;killall xfce4-panel;nohup lxpanel > /dev/null 2> /dev/null &")

    def startxfce(self, widget):
        os.system("sed -i -e 's/p=12/p=6/g' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml;sed -i -e 's/mate-panel/xfce4-panel/g' ~/.config/openbox/autostart;sed -i -e 's/tint2/xfce4-panel/g' ~/.config/openbox/autostart;sed -i -e 's/lxpanel/xfce4-panel/g' ~/.config/openbox/autostart;killall xfce4-panel;killall mate-panel;killall tint2;killall lxpanel;nohup xfce4-panel > /dev/null 2> /dev/null &")
        
    def startmate(self, widget):
		os.system("rm ~/.config/dconf/user;cp ~/.config/dconf/user.ob ~/.config/dconf/user;sed -i -e 's/tint2/mate-panel/g' ~/.config/openbox/autostart;sed -i -e 's/xfce4-panel/mate-panel/g' ~/.config/openbox/autostart;sed -i -e 's/lxpanel/mate-panel/g' ~/.config/openbox/autostart;killall mate-panel;killall xfce4-panel;killall lxpanel;killall tint2;nohup mate-panel > /dev/null 2> /dev/null &")
		
    def startdock(self, widget):
	    os.system("sed -i '/docky/d' ~/.config/openbox/autostart;echo 'docky &' >> ~/.config/openbox/autostart;docky &")

    def stopdock(self, widget):
        os.system("sed -i '/docky/d' ~/.config/openbox/autostart;killall docky")
        
    def matelayout(self, widget):
        os.system("sed -i '/docky/d' ~/.config/openbox/autostart;rm ~/.config/dconf/user;cp ~/.config/dconf/user.mate ~/.config/dconf/user;sed -i -e 's/tint2/mate-panel/g' ~/.config/openbox/autostart;sed -i -e 's/xfce4-panel/mate-panel/g' ~/.config/openbox/autostart;sed -i -e 's/lxpanel/mate-panel/g' ~/.config/openbox/autostart;killall xfce4-panel;killall lxpanel;killall tint2;killall mate-panel;killall docky;nohup mate-panel > /dev/null 2> /dev/null &")
        
    def lxdelayout(self, widget):
		os.system("sed -i -e 's/edge=top/edge=bottom/g' ~/.config/lxpanel/default/panels/panel;sed -i -e 's/mate-panel/lxpanel/g' ~/.config/openbox/autostart;sed -i -e 's/xfce4-panel/lxpanel/g' ~/.config/openbox/autostart;sed -i -e 's/tint2/lxpanel/g' ~/.config/openbox/autostart;killall docky;killall lxpanel;killall tint2;killall mate-panel;killall xfce4-panel;nohup lxpanel > /dev/null 2> /dev/null &")	

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_position(gtk.WIN_POS_CENTER)
        self.window.set_size_request(400, 260)
        self.window.set_title("OBRevenge Panel Switcher")

        # Button for Tint2        
        self.tintbutton = gtk.Button("Tint2")
        self.tintbutton.connect("clicked", self.starttint)
        self.tintbutton.set_tooltip_text("Start Tint2")
        

        # Button for LXPanel
        self.lxbutton = gtk.Button("LXPanel")
        self.lxbutton.connect("clicked", self.startlxpanel)
        self.lxbutton.set_tooltip_text("Start LXPanel")
        

        # Button for XFCE Panel
        self.xfcebutton = gtk.Button("XFCE4")
        self.xfcebutton.connect("clicked", self.startxfce)
        self.xfcebutton.set_tooltip_text("Start XFCE4 Panel")
        
        # Button for MATE Panel
        self.matebutton = gtk.Button("MATE")
        self.matebutton.connect("clicked", self.startmate)
        self.matebutton.set_tooltip_text("Start MATE Panel")
        
        # Buttons for Docky
        self.dockonbutton = gtk.Button("Add Dock")
        self.dockonbutton.connect("clicked", self.stopdock)
        self.dockonbutton.connect("clicked", self.startdock)
        self.dockonbutton.set_tooltip_text("Start Dock")
        self.dockoffbutton = gtk.Button("Remove Dock")
        self.dockoffbutton.connect("clicked", self.stopdock)
        self.dockoffbutton.set_tooltip_text("Remove Dock")
        
        # Buttons for Preconfigured Layouts
        self.matelayoutbutton = gtk.Button("Mate")
        self.matelayoutbutton.connect("clicked", self.matelayout)
        self.openlayoutbutton = gtk.Button("Openbox")
        self.openlayoutbutton.connect("clicked", self.stopdock)
        self.openlayoutbutton.connect("clicked", self.starttint)
        self.openlayoutbutton.connect("clicked", self.startdock)
        self.xfcelayoutbutton = gtk.Button("Hybrid")
        self.xfcelayoutbutton.connect("clicked", self.stopdock)
        self.xfcelayoutbutton.connect("clicked", self.startmate)
        self.xfcelayoutbutton.connect("clicked", self.startdock)
        self.lxdelayoutbutton = gtk.Button("LXDE")
        self.lxdelayoutbutton.connect("clicked", self.lxdelayout)
        
        # Making Image
        self.pix = gtk.gdk.pixbuf_new_from_file_at_size("/usr/share/Icons/obrevenge-redhd.png", 100, 100)
        self.image = gtk.Image()
        self.image.set_from_pixbuf(self.pix)
        
        # Making Labels
        self.label = gtk.Label("Please Select Your Preferred Panel. (OBR Style)")
        self.docklabel = gtk.Label("Would you like a Dock?")
        self.layoutlabel = gtk.Label("Preconfigured Layouts")

        # Creating box containers
        self.hbox1 = gtk.HBox()
        self.hbox1.set_homogeneous(10)
        self.hbox1.pack_start(self.tintbutton)
        self.hbox1.pack_start(self.lxbutton)
        self.hbox1.pack_start(self.xfcebutton)
        self.hbox1.pack_start(self.matebutton)
        self.vbox = gtk.VBox()
        self.hbox4 = gtk.HBox()
        self.hbox4.pack_start(self.image)
        self.hbox2 = gtk.HBox()
        self.hbox2.pack_start(self.label)
        self.hbox3 = gtk.HBox()
        self.hbox5 = gtk.HBox()
        self.hbox5.pack_start(self.docklabel)
        self.hbox6 = gtk.HBox()
        self.hbox6.set_homogeneous(20)
        self.hbox6.pack_start(self.dockonbutton)
        self.hbox6.pack_start(self.dockoffbutton)
        self.hbox7 = gtk.HBox()
        self.hbox7.pack_start(self.layoutlabel)
        self.hbox8 = gtk.HBox()
        self.hbox8.set_homogeneous(10)
        self.hbox8.pack_start(self.matelayoutbutton)
        self.hbox8.pack_start(self.openlayoutbutton)
        self.hbox8.pack_start(self.xfcelayoutbutton)
        self.hbox8.pack_start(self.lxdelayoutbutton)
        self.hbox9 = gtk.HBox()

        # Placing items
        self.window.add(self.vbox)
        self.vbox.add(self.hbox4)
        self.vbox.add(self.hbox2)
        self.vbox.add(self.hbox1)
        self.vbox.add(self.hbox3)
        self.vbox.add(self.hbox5)
        self.vbox.add(self.hbox6)
        self.vbox.add(self.hbox7)
        self.vbox.add(self.hbox8)
        self.vbox.add(self.hbox9)
        self.window.show_all()
        self.window.connect("destroy", self.destroy)

    def main(self):
        gtk.main()

# Running Main Window
if __name__== "__main__":
    base = Base()
    base.main()
